// Settings Page JavaScript
const SettingsManager = {
    // Default settings
    defaultSettings: {
        // General Settings
        autoFillOnLoad: true,
        showVisualFeedback: true,
        debugMode: false,
        fillDelay: 500,

        // Social Media Settings
        autoNormalizeUrls: true,
        validateUrls: true,
        defaultSocialPlatforms: 'facebook, instagram, twitter, youtube, linkedin',

        // Duplicate Prevention
        strictMode: true,
        caseSensitive: false,
        similarityThreshold: 0.8,

        // Description Auto-fill
        autoGenerateDescriptions: true,
        overwriteUserChanges: false,
        defaultTemplate: 'auto',
        descriptionMinLength: 20,

        // Google Sheets Import
        autoParseOnImport: true,
        showImportWarnings: true,
        importTimeout: 30,

        // Advanced Settings
        logLevel: 'info',
        cacheSize: 10,
        updateInterval: 5
    },

    // Initialize settings page
    async initialize() {
        try {
            console.log('[SETTINGS] Initializing settings page...');
            
            // Load current settings
            await this.loadSettings();
            
            // Setup event listeners
            this.setupEventListeners();
            
            // Load statistics
            await this.loadStatistics();
            
            // Setup section toggles
            this.setupSectionToggles();
            
            console.log('[SETTINGS] Settings page initialized successfully');
        } catch (error) {
            console.error('[SETTINGS] Error initializing settings:', error);
            this.showStatus('Error initializing settings', 'error');
        }
    },

    // Load settings from storage
    async loadSettings() {
        try {
            const { settings = {} } = await chrome.storage.sync.get('settings');
            const currentSettings = { ...this.defaultSettings, ...settings };
            
            // Apply settings to UI
            this.applySettingsToUI(currentSettings);

            // Also populate LLM API key input if present (stored separately)
            try {
                const res = await chrome.storage.sync.get('llmApiKey');
                const key = res.llmApiKey || '';
                const apiInput = document.getElementById('llmApiKey');
                if (apiInput) apiInput.value = key;
                console.log('[SETTINGS] Settings loaded:', currentSettings, { llmApiKey: !!key });
            } catch (e) {
                console.log('[SETTINGS] Settings loaded:', currentSettings);
            }
        } catch (error) {
            console.error('[SETTINGS] Error loading settings:', error);
            this.showStatus('Error loading settings', 'error');
        }
    },

    // Apply settings to UI elements
    applySettingsToUI(settings) {
        // General Settings
        this.setCheckboxValue('autoFillOnLoad', settings.autoFillOnLoad);
        this.setCheckboxValue('showVisualFeedback', settings.showVisualFeedback);
        this.setCheckboxValue('debugMode', settings.debugMode);
        this.setRangeValue('fillDelay', settings.fillDelay);

        // Social Media Settings
        this.setCheckboxValue('autoNormalizeUrls', settings.autoNormalizeUrls);
        this.setCheckboxValue('validateUrls', settings.validateUrls);
        this.setTextValue('defaultSocialPlatforms', settings.defaultSocialPlatforms);

        // Duplicate Prevention
        this.setCheckboxValue('strictMode', settings.strictMode);
        this.setCheckboxValue('caseSensitive', settings.caseSensitive);
        this.setRangeValue('similarityThreshold', settings.similarityThreshold);

        // Description Auto-fill
        this.setCheckboxValue('autoGenerateDescriptions', settings.autoGenerateDescriptions);
        this.setCheckboxValue('overwriteUserChanges', settings.overwriteUserChanges);
        this.setSelectValue('defaultTemplate', settings.defaultTemplate);
        this.setNumberValue('descriptionMinLength', settings.descriptionMinLength);

        // Google Sheets Import
        this.setCheckboxValue('autoParseOnImport', settings.autoParseOnImport);
        this.setCheckboxValue('showImportWarnings', settings.showImportWarnings);
        this.setNumberValue('importTimeout', settings.importTimeout);

        // Advanced Settings
        this.setSelectValue('logLevel', settings.logLevel);
        this.setNumberValue('cacheSize', settings.cacheSize);
        this.setNumberValue('updateInterval', settings.updateInterval);
    },

    // Helper methods for setting UI values
    setCheckboxValue(id, value) {
        const element = document.getElementById(id);
        if (element) element.checked = value;
    },

    setRangeValue(id, value) {
        const element = document.getElementById(id);
        if (element) element.value = value;
    },

    setTextValue(id, value) {
        const element = document.getElementById(id);
        if (element) element.value = value;
    },

    setSelectValue(id, value) {
        const element = document.getElementById(id);
        if (element) element.value = value;
    },

    setNumberValue(id, value) {
        const element = document.getElementById(id);
        if (element) element.value = value;
    },

    // Setup event listeners
    setupEventListeners() {
        // Range sliders with live updates
        const rangeSliders = document.querySelectorAll('input[type="range"]');
        rangeSliders.forEach(slider => {
            slider.addEventListener('input', (e) => {
                this.updateRangeDisplay(e.target);
            });
        });

        // Auto-save on change (debounced)
        const debouncedSave = this.debounce(() => {
            this.saveSettings();
        }, 1000);

        const inputs = document.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            input.addEventListener('change', debouncedSave);
        });
    },

    // Update range display
    updateRangeDisplay(rangeElement) {
        const value = rangeElement.value;
        const unit = rangeElement.id === 'fillDelay' ? 'ms' : 
                    rangeElement.id === 'similarityThreshold' ? '%' : '';
        
        // You can add visual feedback here if needed
        console.log(`[SETTINGS] ${rangeElement.id}: ${value}${unit}`);
    },

    // Setup section toggles
    setupSectionToggles() {
        const sections = document.querySelectorAll('.settings-section');
        sections.forEach(section => {
            const header = section.querySelector('.section-header');
            const content = section.querySelector('.section-content');
            const toggle = section.querySelector('.section-toggle');
            
            if (header && content && toggle) {
                header.addEventListener('click', () => {
                    const isActive = content.classList.contains('active');
                    
                    if (isActive) {
                        content.classList.remove('active');
                        toggle.textContent = '▼';
                    } else {
                        content.classList.add('active');
                        toggle.textContent = '▲';
                    }
                });
            }
        });
    },

    // Load statistics
    async loadStatistics() {
        try {
            // Get all storage data
            const allData = await chrome.storage.sync.get();
            
            // Count social links
            const socialLinks = allData.socialLinks || [];
            const socialLinksCount = Array.isArray(socialLinks) ? socialLinks.length : Object.keys(socialLinks).length;
            
            // Count universal fields
            const universalFormData = allData.universalFormData || {};
            const universalFieldsCount = Object.keys(universalFormData).length;
            
            // Count services
            const services = allData.services || {};
            const servicesCount = Object.keys(services).length;
            
            // Calculate storage usage (approximate)
            const storageUsed = JSON.stringify(allData).length;
            const storageUsedKB = Math.round(storageUsed / 1024);
            
            // Update UI
            this.updateElement('socialLinksCount', socialLinksCount);
            this.updateElement('universalFieldsCount', universalFieldsCount);
            this.updateElement('servicesCount', servicesCount);
            this.updateElement('storageUsed', `${storageUsedKB} KB`);
            
        } catch (error) {
            console.error('[SETTINGS] Error loading statistics:', error);
        }
    },

    // Update element text content
    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) element.textContent = value;
    },

    // Save settings
    async saveSettings() {
        try {
            const settings = this.collectSettingsFromUI();
            
            await chrome.storage.sync.set({ settings });
            
            // Persist LLM API key separately if there is an input field
            try {
                const apiInput = document.getElementById('llmApiKey');
                if (apiInput) {
                    const key = apiInput.value?.trim() || '';
                    await chrome.storage.sync.set({ llmApiKey: key });
                    // Notify runtime/background/content scripts of the new key so they can update immediately
                    try {
                        chrome.runtime.sendMessage({ action: 'updateLLMKey', llmApiKey: key });
                    } catch (e) {
                        console.warn('[SETTINGS] Could not send runtime message for llmApiKey:', e);
                    }
                }
            } catch (e) {
                console.warn('[SETTINGS] Could not persist llmApiKey:', e);
            }
            
            // Update other systems with new settings
            await this.updateSystemSettings(settings);
            
            this.showStatus('Settings saved successfully!', 'success');
            console.log('[SETTINGS] Settings saved:', settings);
            
        } catch (error) {
            console.error('[SETTINGS] Error saving settings:', error);
            this.showStatus('Error saving settings', 'error');
        }
    },

    // Collect settings from UI
    collectSettingsFromUI() {
        return {
            // General Settings
            autoFillOnLoad: document.getElementById('autoFillOnLoad')?.checked ?? true,
            showVisualFeedback: document.getElementById('showVisualFeedback')?.checked ?? true,
            debugMode: document.getElementById('debugMode')?.checked ?? false,
            fillDelay: parseInt(document.getElementById('fillDelay')?.value) || 500,

            // Social Media Settings
            autoNormalizeUrls: document.getElementById('autoNormalizeUrls')?.checked ?? true,
            validateUrls: document.getElementById('validateUrls')?.checked ?? true,
            defaultSocialPlatforms: document.getElementById('defaultSocialPlatforms')?.value || '',

            // Duplicate Prevention
            strictMode: document.getElementById('strictMode')?.checked ?? true,
            caseSensitive: document.getElementById('caseSensitive')?.checked ?? false,
            similarityThreshold: parseFloat(document.getElementById('similarityThreshold')?.value) || 0.8,

            // Description Auto-fill
            autoGenerateDescriptions: document.getElementById('autoGenerateDescriptions')?.checked ?? true,
            overwriteUserChanges: document.getElementById('overwriteUserChanges')?.checked ?? false,
            defaultTemplate: document.getElementById('defaultTemplate')?.value || 'auto',
            descriptionMinLength: parseInt(document.getElementById('descriptionMinLength')?.value) || 20,

            // Google Sheets Import
            autoParseOnImport: document.getElementById('autoParseOnImport')?.checked ?? true,
            showImportWarnings: document.getElementById('showImportWarnings')?.checked ?? true,
            importTimeout: parseInt(document.getElementById('importTimeout')?.value) || 30,

            // Advanced Settings
            logLevel: document.getElementById('logLevel')?.value || 'info',
            cacheSize: parseInt(document.getElementById('cacheSize')?.value) || 10,
            updateInterval: parseInt(document.getElementById('updateInterval')?.value) || 5
        };
    },

    // Update system settings
    async updateSystemSettings(settings) {
        try {
            // Notify content scripts about settings changes
            const tabs = await chrome.tabs.query({});
            for (const tab of tabs) {
                try {
                    await chrome.tabs.sendMessage(tab.id, {
                        action: 'updateSettings',
                        settings: settings
                    });
                } catch (error) {
                    // Ignore errors for tabs that don't have content scripts
                }
            }

            // Update background script
            chrome.runtime.sendMessage({
                action: 'updateSettings',
                settings: settings
            });

        } catch (error) {
            console.error('[SETTINGS] Error updating system settings:', error);
        }
    },

    // Reset settings to defaults
    async resetSettings() {
        if (confirm('Are you sure you want to reset all settings to defaults?')) {
            try {
                await chrome.storage.sync.set({ settings: this.defaultSettings });
                this.applySettingsToUI(this.defaultSettings);
                this.showStatus('Settings reset to defaults', 'success');
            } catch (error) {
                console.error('[SETTINGS] Error resetting settings:', error);
                this.showStatus('Error resetting settings', 'error');
            }
        }
    },

    // Export data
    async exportData() {
        try {
            const allData = await chrome.storage.sync.get();
            const exportData = {
                timestamp: new Date().toISOString(),
                version: '1.0',
                data: allData
            };

            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `social-filler-pro-backup-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            this.showStatus('Data exported successfully!', 'success');
        } catch (error) {
            console.error('[SETTINGS] Error exporting data:', error);
            this.showStatus('Error exporting data', 'error');
        }
    },

    // Import data
    async importData(event) {
        const file = event.target.files[0];
        if (!file) return;

        try {
            const text = await file.text();
            const importData = JSON.parse(text);

            if (!importData.data) {
                throw new Error('Invalid backup file format');
            }

            if (confirm('This will overwrite all current data. Are you sure?')) {
                await chrome.storage.sync.clear();
                await chrome.storage.sync.set(importData.data);
                
                // Reload settings and statistics
                await this.loadSettings();
                await this.loadStatistics();
                
                this.showStatus('Data imported successfully!', 'success');
            }
        } catch (error) {
            console.error('[SETTINGS] Error importing data:', error);
            this.showStatus('Error importing data: ' + error.message, 'error');
        }

        // Reset file input
        event.target.value = '';
    },

    // Clean duplicates
    async cleanDuplicates() {
        try {
            if (window.DuplicatePrevention) {
                const cleanedCount = await window.DuplicatePrevention.cleanupDuplicates();
                this.showStatus(`Cleaned ${cleanedCount} duplicates`, 'success');
                await this.loadStatistics(); // Refresh stats
            } else {
                this.showStatus('Duplicate prevention system not available', 'error');
            }
        } catch (error) {
            console.error('[SETTINGS] Error cleaning duplicates:', error);
            this.showStatus('Error cleaning duplicates', 'error');
        }
    },

    // Reset all data
    async resetAllData() {
        if (confirm('Are you sure you want to delete ALL data? This cannot be undone!')) {
            if (confirm('This will permanently delete all your social links, universal form data, and settings. Are you absolutely sure?')) {
                try {
                    await chrome.storage.sync.clear();
                    this.showStatus('All data has been reset', 'success');
                    await this.loadSettings();
                    await this.loadStatistics();
                } catch (error) {
                    console.error('[SETTINGS] Error resetting data:', error);
                    this.showStatus('Error resetting data', 'error');
                }
            }
        }
    },

    // Show status message
    showStatus(message, type = 'info') {
        const statusElement = document.getElementById('statusMessage');
        if (statusElement) {
            statusElement.textContent = message;
            statusElement.className = `status-message status-${type}`;
            statusElement.style.display = 'block';

            // Auto-hide after 3 seconds
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 3000);
        }
    },

    // Debounce function
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
};

// Global functions for HTML onclick handlers
function goBack() {
    window.close();
}

function toggleSection(header) {
    const content = header.nextElementSibling;
    const toggle = header.querySelector('.section-toggle');
    
    if (content.classList.contains('active')) {
        content.classList.remove('active');
        toggle.textContent = '▼';
    } else {
        content.classList.add('active');
        toggle.textContent = '▲';
    }
}

function saveSettings() {
    SettingsManager.saveSettings();
}

function resetSettings() {
    SettingsManager.resetSettings();
}

function exportData() {
    SettingsManager.exportData();
}

function importData(event) {
    SettingsManager.importData(event);
}

function cleanDuplicates() {
    SettingsManager.cleanDuplicates();
}

function resetAllData() {
    SettingsManager.resetAllData();
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', () => {
    SettingsManager.initialize();
});
