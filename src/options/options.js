class SettingsService {
    constructor() {
        this.defaultSettings = {
            autoFillOnLoad: true,
            showVisualFeedback: true,
            debugMode: false,
            fillDelay: 500,
            autoNormalizeUrls: true,
            validateUrls: true,
            defaultSocialPlatforms: 'facebook, instagram, twitter, youtube, linkedin',
            strictMode: true,
            caseSensitive: false,
            similarityThreshold: 0.8,
            autoGenerateDescriptions: true,
            overwriteUserChanges: false,
            defaultTemplate: 'auto',
            descriptionMinLength: 20,
            autoParseOnImport: true,
            showImportWarnings: true,
            importTimeout: 30,
            logLevel: 'info',
            cacheSize: 10,
            updateInterval: 5
        };
    }

    async getSettings() {
        const { settings } = await chrome.storage.sync.get('settings');
        return { ...this.defaultSettings, ...settings };
    }

    async saveSettings(settings) {
        await chrome.storage.sync.set({ settings });
    }

    async resetSettings() {
        await this.saveSettings(this.defaultSettings);
    }

    async getStatistics() {
        const allData = await chrome.storage.sync.get();
        const socialLinks = allData.socialLinks || [];
        const universalFormData = allData.universalFormData || {};
        const services = allData.services || {};
        const storageUsed = JSON.stringify(allData).length;

        return {
            socialLinksCount: Array.isArray(socialLinks) ? socialLinks.length : Object.keys(socialLinks).length,
            universalFieldsCount: Object.keys(universalFormData).length,
            servicesCount: Object.keys(services).length,
            storageUsedKB: Math.round(storageUsed / 1024)
        };
    }

    async exportData() {
        const allData = await chrome.storage.sync.get();
        return {
            timestamp: new Date().toISOString(),
            version: '1.0',
            data: allData
        };
    }

    async importData(data) {
        await chrome.storage.sync.clear();
        await chrome.storage.sync.set(data);
    }

    async resetAllData() {
        await chrome.storage.sync.clear();
    }
}

class UIManager {
    constructor() {
        this.statusMessage = document.getElementById('statusMessage');
    }

    renderSettings(settings) {
        Object.keys(settings).forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                if (element.type === 'checkbox') {
                    element.checked = settings[id];
                } else {
                    element.value = settings[id];
                }
            }
        });
    }

    renderStatistics(stats) {
        this.updateElement('socialLinksCount', stats.socialLinksCount);
        this.updateElement('universalFieldsCount', stats.universalFieldsCount);
        this.updateElement('servicesCount', stats.servicesCount);
        this.updateElement('storageUsed', `${stats.storageUsedKB} KB`);
    }

    collectSettings() {
        const settings = {};
        const elements = document.querySelectorAll('[id]');
        elements.forEach(element => {
            if (element.type === 'checkbox') {
                settings[element.id] = element.checked;
            } else if (element.value) {
                settings[element.id] = element.value;
            }
        });
        return settings;
    }

    showStatus(message, type = 'info') {
        this.statusMessage.textContent = message;
        this.statusMessage.className = `status-message status-${type}`;
        this.statusMessage.style.display = 'block';
        setTimeout(() => this.statusMessage.style.display = 'none', 3000);
    }

    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    setupSectionToggles() {
        document.querySelectorAll('.section-header').forEach(header => {
            header.addEventListener('click', () => {
                const content = header.nextElementSibling;
                const toggle = header.querySelector('.section-toggle');
                content.classList.toggle('active');
                toggle.textContent = content.classList.contains('active') ? '▲' : '▼';
            });
        });
    }
}

class SettingsManager {
    constructor(service, ui) {
        this.service = service;
        this.ui = ui;
    }

    async initialize() {
        this.ui.setupSectionToggles();
        await this.loadSettings();
        await this.loadStatistics();
        this.setupEventListeners();
    }

    async loadSettings() {
        const settings = await this.service.getSettings();
        this.ui.renderSettings(settings);
    }

    async loadStatistics() {
        const stats = await this.service.getStatistics();
        this.ui.renderStatistics(stats);
    }

    async saveSettings() {
        const settings = this.ui.collectSettings();
        await this.service.saveSettings(settings);
        this.ui.showStatus('Settings saved successfully!', 'success');
    }

    async resetSettings() {
        if (confirm('Are you sure you want to reset all settings to defaults?')) {
            await this.service.resetSettings();
            await this.loadSettings();
            this.ui.showStatus('Settings reset to defaults', 'success');
        }
    }

    async exportData() {
        const data = await this.service.exportData();
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `social-filler-pro-backup-${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        URL.revokeObjectURL(url);
        this.ui.showStatus('Data exported successfully!', 'success');
    }

    async importData(event) {
        const file = event.target.files[0];
        if (file && confirm('This will overwrite all current data. Are you sure?')) {
            const text = await file.text();
            const { data } = JSON.parse(text);
            await this.service.importData(data);
            await this.loadSettings();
            await this.loadStatistics();
            this.ui.showStatus('Data imported successfully!', 'success');
        }
        event.target.value = '';
    }

    async resetAllData() {
        if (confirm('Are you sure you want to delete ALL data? This cannot be undone!')) {
            await this.service.resetAllData();
            await this.loadSettings();
            await this.loadStatistics();
            this.ui.showStatus('All data has been reset', 'success');
        }
    }

    setupEventListeners() {
        document.getElementById('importFile').addEventListener('change', e => this.importData(e));
        window.saveSettings = () => this.saveSettings();
        window.resetSettings = () => this.resetSettings();
        window.exportData = () => this.exportData();
        window.resetAllData = () => this.resetAllData();
        window.goBack = () => window.close();
        // Removed cleanDuplicates from window
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const service = new SettingsService();
    const ui = new UIManager();
    const manager = new SettingsManager(service, ui);
    manager.initialize();
});